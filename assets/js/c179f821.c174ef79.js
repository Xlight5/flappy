"use strict";(self.webpackChunk_pleisto_flappy_docs=self.webpackChunk_pleisto_flappy_docs||[]).push([[699],{5318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9798:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7378),r=n(7140);const o={tabItem:"tabItem_wHwb"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:n},t)}},3930:(e,t,n)=>{n.d(t,{Z:()=>T});var a=n(5773),r=n(7378),o=n(7140),l=n(3457),i=n(3620),s=n(654),u=n(784),c=n(1819);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=p(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[s,u]=h({queryString:n,groupId:a}),[d,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),g=(()=>{const e=s??d;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{g&&i(g)}),[g]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),f(e)}),[u,f,o]),tabValues:o}}var g=n(6457);const y={tabList:"tabList_J5MA",tabItem:"tabItem_l0OV"};function b(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),p=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==i&&(d(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:p},l,{className:(0,o.Z)("tabs__item",y.tabItem,l?.className,{"tabs__item--active":i===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function k(e){const t=f(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",y.tabList)},r.createElement(b,(0,a.Z)({},e,t)),r.createElement(v,(0,a.Z)({},e,t)))}function T(e){const t=(0,g.Z)();return r.createElement(k,(0,a.Z)({key:String(t)},e))}},8500:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var a=n(5773),r=(n(7378),n(5318)),o=n(3930),l=n(9798);const i={sidebar_position:2},s="Quick Start",u={unversionedId:"quick-start",id:"quick-start",title:"Quick Start",description:"\u26a0\ufe0f This project is still under development. We're working hard to release the first version of Flappy as soon as possible. Stay tuned! Documentation and code examples will be available soon.",source:"@site/docs/quick-start.mdx",sourceDirName:".",slug:"/quick-start",permalink:"/docs/quick-start",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/quick-start.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docSidebar",previous:{title:"Introduction",permalink:"/docs/"},next:{title:"Sythesized Function",permalink:"/docs/sythesized-function"}},c={},d=[{value:"Installation",id:"installation",level:2},{value:"Create LLM Adapter",id:"create-llm-adapter",level:2},{value:"Define your agent",id:"define-your-agent",level:2},{value:"Key Concepts",id:"key-concepts",level:3},{value:"Functions",id:"functions",level:4},{value:"Code Interpreter",id:"code-interpreter",level:4},{value:"Call your agent",id:"call-your-agent",level:2},{value:"Create and execute a action plan",id:"create-and-execute-a-action-plan",level:3},{value:"Call sythesized function directly",id:"call-sythesized-function-directly",level:3},{value:"Call Code Interpreter",id:"call-code-interpreter",level:3}],p={toc:d},m="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quick-start"},"Quick Start"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"\u26a0\ufe0f This project is still under development. We're working hard to release the first version of Flappy as soon as possible. Stay tuned! Documentation and code examples will be available soon.")),(0,r.kt)("p",null,"Flappy is a programming language agnostic sdk for building LLM based agents/applications. Please specify the language you are using to get started."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"nodejs",label:"NodeJS (TypeScript)",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @plesito/node-flappy\n# or yarn add @pleisto/node-flappy\n"))),(0,r.kt)(l.Z,{value:"java",label:"Java",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"Maven"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>com.pleisto</groupId>\n    <artifactId>flappy</artifactId>\n    <version>0.0.7</version>\n</dependency>\n")),(0,r.kt)("p",null,"Gradle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"implementation 'com.pleisto:flappy:0.0.7'\n"))),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'implementation("com.pleisto:flappy:0.0.7")\n'))),(0,r.kt)(l.Z,{value:"csharp",label:"C#",default:!0,mdxType:"TabItem"},"Coming soon")),(0,r.kt)("h2",{id:"create-llm-adapter"},"Create LLM Adapter"),(0,r.kt)("p",null,"Flappy supports multiple LLM implementations, such as OpenAI ChatGPT and hugingface transformers. You can also create your own LLM adapter by implementing the ",(0,r.kt)("inlineCode",{parentName:"p"},"LLMBase")," interface."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"nodejs-chatgpt",label:"NodeJS (TypeScript) with ChatGPT",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// you need to manually install `openai` package.\nimport { env } from 'node:process'\nimport OpenAI from 'openai'\nimport { ChatGPT } from '@pleisto/node-flappy'\n\nconst chatGpt = new ChatGPT(\n  new OpenAI({\n    apiKey: env.OPENAI_API_KEY!,\n    baseURL: env.OPENAI_API_BASE!\n  }),\n  'gpt-3.5-turbo'\n)\n"))),(0,r.kt)(l.Z,{value:"nodejs-baichuan",label:"NodeJS (TypeScript) with Baichuan-53B API",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { env } from 'node:process'\nimport { Baichuan } from '@pleisto/node-flappy'\n\nconst chatGpt = new Baichuan(\n {\n  baichuan_api_key: env.BAICHUAN_API_KEY!,\n  baichuan_secret_key: env.BAICHUAN_SECRET_KEY!,\n }\n)\n"))),(0,r.kt)(l.Z,{value:"java",label:"Java",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'    Dotenv dotenv = Dotenv.load();\n    ChatGPT llm = new ChatGPT("gpt-3.5-turbo", new ChatGPT.ChatGPTConfig(dotenv.get("OPENAI_TOKEN"), dotenv.get("OPENAI_API_BASE")));\n'))),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'  val dotenv = dotenv()\n\n  val chatGPT = ChatGPT(\n    model = "gpt-3.5-turbo",\n    chatGPTConfig = ChatGPT.ChatGPTConfig(token = dotenv["OPENAI_TOKEN"], host = dotenv["OPENAI_API_BASE"])\n  )\n'))),(0,r.kt)(l.Z,{value:"csharp",label:"C#",default:!0,mdxType:"TabItem"},"Coming soon")),(0,r.kt)("h2",{id:"define-your-agent"},"Define your agent"),(0,r.kt)("p",null,"In artificial intelligence, an agent is a computer program or system that is designed to perceive its environment, make decisions and take actions to achieve a specific goal or set of goals. The agent operates autonomously, meaning it is not directly controlled by a human operator."),(0,r.kt)("p",null,"In Flappy's ecosystem, the agent operates as a versatile conduit for the LLM. It's designed to juggle a variety of tasks - structuring data, invoking external APIs, or sandboxing LLM-generated Python code - in any combination as needed. It's a flexible tool, not a rigid cog, adapting to your needs for a more efficient and secure LLM interaction."),(0,r.kt)("h3",{id:"key-concepts"},"Key Concepts"),(0,r.kt)("h4",{id:"functions"},"Functions"),(0,r.kt)("p",null,"Functions act as the foundation for your agent in the Flappy framework. In this documentation, we will introduce ",(0,r.kt)("inlineCode",{parentName:"p"},"InvokeFunction")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"SythesizedFunction"),", two essential function types you can define and utilize."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"InvokeFunction")," enables agents to interact with the environment, similar to Tools in Langchain's Agents. It's defined by input and output parameters, whose structures must be clear for the Language Learning Model (LLM) to interact efficiently. Understanding these parameters and the function's role in interacting with user requests and the world is essential. For cost-effective task planning."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SythesizedFunction")," is a type of function played by the LLM. You only need to define its description and the structure of its inputs and outputs. The LLM will then attempt to process inputs in the defined format and produce outputs in the expected format. This feature makes SythesizedFunction particularly useful in scenarios where structured data extraction tasks are performed by the LLM or when the LLM is expected to output structured data.")),(0,r.kt)("h4",{id:"code-interpreter"},"Code Interpreter"),(0,r.kt)("p",null,"The Code Interpreter in Flappy serves as an equivalent replacement for ChatGPT Code Interpreter, enabling the language model to fulfill complex user requirements through Python code. What sets Flappy's Code Interpreter apart from other open-source implementations in the market is its sandboxed safety feature. This ensures that it meets the stringent security needs necessary for deployment in a production environment."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"nodejs",label:"NodeJS (TypeScript) with ChatGPT",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createFlappyAgent,  createInvokeFunction,  createSynthesizedFunction,  z } from '@pleisto/node-flappy'\n\nenum Verdict {\n  Innocent = 'Innocent',\n  Guilty = 'Guilty',\n  Unknown = 'Unknown'\n}\n\nconst MOCK_LAWSUIT_DATA =\n  \"As Alex Jones continues telling his Infowars audience about his money problems and pleads for them to buy his products, his own documents show life is not all that bad \u2014 his net worth is around $14 million and his personal spending topped $93,000 in July alone, including thousands of dollars on meals and entertainment. The conspiracy theorist and his lawyers file monthly financial reports in his personal bankruptcy case, and the latest one has struck a nerve with the families of victims of Sandy Hook Elementary School shooting. They're still seeking the $1.5 billion they won last year in lawsuits against Jones and his media company for repeatedly calling the 2012 massacre a hoax on his shows. \u201cIt is disturbing that Alex Jones continues to spend money on excessive household expenditures and his extravagant lifestyle when that money rightfully belongs to the families he spent years tormenting,\u201d said Christopher Mattei, a Connecticut lawyer for the families. \u201cThe families are increasingly concerned and will continue to contest these matters in court.\u201d In an Aug. 29 court filing, lawyers for the families said that if Jones doesn\u2019t reduce his personal expenses to a \u201creasonable\u201d level, they will ask the bankruptcy judge to bar him from \u201cfurther waste of estate assets,\u201d appoint a trustee to oversee his spending, or dismiss the bankruptcy case. On his Infowars show Tuesday, Jones said he\u2019s not doing anything wrong.\"\n\nconst agent = createFlappyAgent({\n  llm: chatGpt,\n  // Define your agent's functions.\n  functions: [\n    createSynthesizedFunction({\n      name: 'getMeta',\n      description: 'Extract meta data from a lawsuit full text.',\n      args: z.object({\n        lawsuit: z.string().describe('Lawsuit full text.')\n      }),\n      returnType: z.object({\n        verdict: z.nativeEnum(Verdict),\n        plaintiff: z.string(),\n        defendant: z.string(),\n        judgeOptions: z.array(z.string())\n      })\n    }),\n    createInvokeFunction({\n      name: 'getLatestLawsuitsByPlaintiff',\n      description: 'Get the latest lawsuits by plaintiff.',\n      args: z.object({\n        plaintiff: z.string(),\n        arg1: z.boolean().describe('For demo purpose. set to False'),\n        arg2: z.array(z.string()).describe('ignore it').optional()\n      }),\n      returnType: z.string(),\n      resolve: async args => {\n        // Do something\n        // e.g. query SQL database\n        console.debug('getLatestLawsuitsByPlaintiff called', args)\n        return MOCK_LAWSUIT_DATA\n      }\n    })\n  ],\n  // Settings for the code interpreter sandbox\n  codeInterpreter: {\n    enableNetwork: true,\n    env: env as Record<string, string>\n  }\n})\n"))),(0,r.kt)(l.Z,{value:"java",label:"Java",default:!0,mdxType:"TabItem"},"Coming soon"),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",default:!0,mdxType:"TabItem"},"Coming soon"),(0,r.kt)(l.Z,{value:"csharp",label:"C#",default:!0,mdxType:"TabItem"},"Coming soon")),(0,r.kt)("h2",{id:"call-your-agent"},"Call your agent"),(0,r.kt)("h3",{id:"create-and-execute-a-action-plan"},"Create and execute a action plan"),(0,r.kt)("p",null,"Augmented Language Models (ALMs) blend the reasoning capabilities of Large Language Models (LLMs) with tools that allow for knowledge retrieval and action execution. Existing ALM systems trigger LLM thought processes while pulling observations from these tools in an interleaved fashion. Specifically, an LLM reasons to call an external tool, gets halted to fetch the tool's response, and then decides the next action based on all preceding response tokens. Such a paradigm, though straightforward and easy to implement, often leads to huge computation complexity from redundant prompts and repeated execution."),(0,r.kt)("p",null,"Flappy uses ",(0,r.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/2305.18323"},"ReWOO")," instead of ",(0,r.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/2210.03629"},"ReAct")," to minimize LLM token output, thereby reducing costs. Building on this, the agent is equipped to autonomously devise a plan based on the user's prompt. This involves determining the sequence of functions that need to be invoked to fulfill the given prompt. The execution then proceeds according to this formulated plan, further optimizing the efficiency of our system."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"nodejs",label:"NodeJS (TypeScript) with ChatGPT",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"agent.executePlan('Find the latest case with the plaintiff being families of victims and return its metadata.')\n"))),(0,r.kt)(l.Z,{value:"java",label:"Java",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"  Future<LawMetaReturn> future = lawAgent.executePlanAsync(LAW_EXECUTE_PLAN_PROMPT);\n"))),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"  lawAgent.use {\n    it.executePlan<LawMetaReturn>(LAW_EXECUTE_PLAN_PROMPT)\n  }\n"))),(0,r.kt)(l.Z,{value:"csharp",label:"C#",default:!0,mdxType:"TabItem"},"Coming soon")),(0,r.kt)("h3",{id:"call-sythesized-function-directly"},"Call sythesized function directly"),(0,r.kt)("p",null,"You can also call sythesized function directly without executing a action plan."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"nodejs",label:"NodeJS (TypeScript) with ChatGPT",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"agent.callFunction('getMeta', {lawsuit: MOCK_LAWSUIT_DATA})\n"))),(0,r.kt)(l.Z,{value:"java",label:"Java",default:!0,mdxType:"TabItem"},"Coming soon"),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",default:!0,mdxType:"TabItem"},"Coming soon"),(0,r.kt)(l.Z,{value:"csharp",label:"C#",default:!0,mdxType:"TabItem"},"Coming soon")),(0,r.kt)("h3",{id:"call-code-interpreter"},"Call Code Interpreter"),(0,r.kt)("p",null,"Code Interpreter currently needs to be called directly. We are working on a better way to integrate it with the agent."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"nodejs",label:"NodeJS (TypeScript) with ChatGPT",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"agent.callCodeInterpreter(\n  'There are some rabbits and chickens in a barn. What is the number of chickens if there are 396 legs  and 150 heads in the barn?'\n)\n"))),(0,r.kt)(l.Z,{value:"java",label:"Java",default:!0,mdxType:"TabItem"},"Coming soon"),(0,r.kt)(l.Z,{value:"kotlin",label:"Kotlin",default:!0,mdxType:"TabItem"},"Coming soon"),(0,r.kt)(l.Z,{value:"csharp",label:"C#",default:!0,mdxType:"TabItem"},"Coming soon")))}h.isMDXComponent=!0}}]);