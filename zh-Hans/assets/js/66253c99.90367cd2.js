"use strict";(self.webpackChunk_pleisto_flappy_docs=self.webpackChunk_pleisto_flappy_docs||[]).push([[69],{2599:(e,n,t)=>{t.d(n,{Z:()=>s});t(7378);var i=t(624);const a={tabItem:"tabItem_wHwb"};var r=t(4246);function s(e){let{children:n,hidden:t,className:s}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,i.Z)(a.tabItem,s),hidden:t,children:n})}},8447:(e,n,t)=>{t.d(n,{Z:()=>L});var i=t(7378),a=t(624),r=t(9169),s=t(3620),o=t(9749),l=t(8981),c=t(56),u=t(8796);function d(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:a}}=e;return{value:n,label:t,attributes:i,default:a}}))}(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const a=(0,s.k6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._X)(r),(0,i.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,r=p(e),[s,l]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:r}))),[c,d]=f({queryString:t,groupId:a}),[g,m]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,u.Nk)(t);return[a,(0,i.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:a}),v=(()=>{const e=c??g;return h({value:e,tabValues:r})?e:null})();(0,o.Z)((()=>{v&&l(v)}),[v]);return{selectedValue:s,selectValue:(0,i.useCallback)((e=>{if(!h({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),m(e)}),[d,m,r]),tabValues:r}}var m=t(362);const v={tabList:"tabList_J5MA",tabItem:"tabItem_l0OV"};var b=t(4246);function y(e){let{className:n,block:t,selectedValue:i,selectValue:s,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.o5)(),u=e=>{const n=e.currentTarget,t=l.indexOf(n),a=o[t].value;a!==i&&(c(n),s(a))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>l.push(e),onKeyDown:d,onClick:u,...r,className:(0,a.Z)("tabs__item",v.tabItem,r?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function w(e){let{lazy:n,children:t,selectedValue:a}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function x(e){const n=g(e);return(0,b.jsxs)("div",{className:(0,a.Z)("tabs-container",v.tabList),children:[(0,b.jsx)(y,{...e,...n}),(0,b.jsx)(w,{...e,...n})]})}function L(e){const n=(0,m.Z)();return(0,b.jsx)(x,{...e,children:d(e.children)},String(n))}},7294:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var i=t(4246),a=t(1670),r=t(8447),s=t(2599);const o={sidebar_position:4},l="Invoke Function",c={id:"invoke-function",title:"Invoke Function",description:"InvokeFunction is a critical feature in the Flappy SDK, a production-ready Language Learning Model (LLM) Application/Agent SDK. This feature allows developers to define functions that an LLM agent can execute to interact with its surrounding environment. This interaction can range from database queries to network requests or any operation that involves system interaction outside of the agent itself.",source:"@site/docs/invoke-function.mdx",sourceDirName:".",slug:"/invoke-function",permalink:"/zh-Hans/docs/invoke-function",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/invoke-function.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docSidebar",previous:{title:"Synthesized Function",permalink:"/zh-Hans/docs/sythesized-function"},next:{title:"Code Interpreter",permalink:"/zh-Hans/docs/code-interpreter"}},u={},d=[{value:"Understanding InvokeFunction",id:"understanding-invokefunction",level:2},{value:"ReAct",id:"react",level:3},{value:"ReWOO",id:"rewoo",level:3},{value:"Why Flappy Chooses ReWOO over ReAct",id:"why-flappy-chooses-rewoo-over-react",level:3},{value:"How to Define an InvokeFunction",id:"how-to-define-an-invokefunction",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"invoke-function",children:"Invoke Function"}),"\n",(0,i.jsx)(n.p,{children:"InvokeFunction is a critical feature in the Flappy SDK, a production-ready Language Learning Model (LLM) Application/Agent SDK. This feature allows developers to define functions that an LLM agent can execute to interact with its surrounding environment. This interaction can range from database queries to network requests or any operation that involves system interaction outside of the agent itself."}),"\n",(0,i.jsx)(n.h2,{id:"understanding-invokefunction",children:"Understanding InvokeFunction"}),"\n",(0,i.jsx)(n.p,{children:"InvokeFunction is defined by its input and output parameters. These structures must be clear for the Language Learning Model (LLM) to interact efficiently. The InvokeFunction in Flappy is designed to work in harmony with the LLM, and the understanding of these parameters and the function's role is crucial for making the interaction efficient and cost-effective."}),"\n",(0,i.jsx)(n.p,{children:"The InvokeFunction plays a significant role in task planning as it helps in defining clear structures for interactions between user requests, the LLM, and the external environment. With a well-defined InvokeFunction, an LLM agent can efficiently devise and execute a plan based on the user's prompt."}),"\n",(0,i.jsxs)(n.p,{children:["Unlike the ReAct paradigm used in existing Agent libraries in the market such as LangChain, Flappy is built on the ReWOO paradigm. ",(0,i.jsx)(n.a,{href:"https://arxiv.org/abs/2210.03629",children:"ReAct"})," and ",(0,i.jsx)(n.a,{href:"https://arxiv.org/abs/2305.18323",children:"ReWOO"})," are two techniques introduced recently in the world of Language Learning Model Agents. Both play crucial roles in how an agent interacts with its environment, but they have different approaches and implications, especially regarding cost-effectiveness in a production environment."]}),"\n",(0,i.jsx)(n.h3,{id:"react",children:"ReAct"}),"\n",(0,i.jsx)(n.p,{children:"ReAct is a technique that emphasizes the interaction of agents with their surroundings before generating subsequent actions. It stimulates the agents with examples that have already been pre-defined. It enforces the idea that an agent should engage in intermediate thinking before executing an action. While this method introduces a new realm of possibilities for LLM agents, it might not be the most cost-effective choice in a production environment due to its relatively higher token output."}),"\n",(0,i.jsx)(n.h3,{id:"rewoo",children:"ReWOO"}),"\n",(0,i.jsx)(n.p,{children:"ReWOO, on the other hand, introduces additional planning processes for LLM agents. It emphasizes the separation of reasoning from observation, which has been shown to increase the effectiveness of LLM agents. More importantly, ReWOO minimizes LLM token output, which is crucial for cost-efficiency in a production environment."}),"\n",(0,i.jsx)(n.h3,{id:"why-flappy-chooses-rewoo-over-react",children:"Why Flappy Chooses ReWOO over ReAct"}),"\n",(0,i.jsx)(n.p,{children:"Flappy opts for the ReWOO paradigm over ReAct due to its cost-effectiveness and efficiency in a production environment. With ReWOO, Flappy can minimize LLM token output, which is crucial for keeping costs under control in a production setting. This makes Flappy a more robust and affordable solution for developers looking to integrate AI capabilities into their applications."}),"\n",(0,i.jsx)(n.h2,{id:"how-to-define-an-invokefunction",children:"How to Define an InvokeFunction"}),"\n",(0,i.jsxs)(n.p,{children:["Defining an ",(0,i.jsx)(n.code,{children:"InvokeFunction"})," allows an agent in the Flappy, regardless of its implementation language, to interact with external systems, such as a database or network resources. Here's the general process:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Identify the External Operation"}),": Determine what kind of operation the agent needs to perform. This could be anything from querying data, making a network request, or any other interaction with external systems."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Define the Function"}),": Using the functionality provided by Flappy, define your function. This usually involves a special function or method provided by the Flappy SDK, like ",(0,i.jsx)(n.code,{children:"createInvokeFunction"})," in the JavaScript implementation. This function requires an object that describes the properties of your function."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Specify Function Properties"}),": These properties generally include:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"name"}),": A unique identifier for your function."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"description"}),": A brief explanation of what your function does."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"args"}),": The arguments that your function accepts. This usually involves specifying the argument's name and type."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"returnType"}),": The type of data your function returns."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"resolve"}),": A method that contains the logic to perform the external operation."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Keep in mind that the specific syntax and naming can differ across different language implementations of Flappy. However, the general concept and process remain the same. The goal is to provide a way for the agent to interact with the external world in a structured and predictable manner."}),"\n",(0,i.jsxs)(r.Z,{children:[(0,i.jsx)(s.Z,{value:"nodejs",label:"NodeJS (TypeScript)",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { createInvokeFunction, z } from '@pleisto/node-flappy'\n\ncreateInvokeFunction({\n      name: 'getLatestLawsuitsByPlaintiff',\n      description: 'Get the latest lawsuits by plaintiff.',\n      args: z.object({\n        plaintiff: z.string(),\n        arg1: z.boolean().describe('For demo purpose. set to False'),\n        arg2: z.array(z.string()).describe('ignore it').optional()\n      }),\n      returnType: z.string(),\n      resolve: async args => {\n        // Do something\n        // e.g. query SQL database\n        console.debug('getLatestLawsuitsByPlaintiff called', args)\n        return MOCK_LAWSUIT_DATA\n      }\n})\n"})})}),(0,i.jsx)(s.Z,{value:"java",label:"Java",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'  public static FlappyFunctionBase<?, ?> lawGetLatestLawsuitsByPlaintiff = new FlappyInvokeFunction(\n    "getLatestLawsuitsByPlaintiff",\n    "Get the latest lawsuits by plaintiff.",\n    GetLatestLawsuitsArguments.class,\n    String.class,\n    (a, agent, $completion) -> MOCK_LAWSUIT_DATA\n  );\n\n  static class GetLatestLawsuitsArguments {\n    @FlappyField\n    String plaintiff;\n\n    @FlappyField(description = "For demo purpose. set to False")\n    Boolean arg1;\n\n    @FlappyField(description = "ignore it", optional = true)\n    List<String> arg2 = null;\n\n    public String getPlaintiff() {\n      return plaintiff;\n    }\n\n    public void setPlaintiff(String plaintiff) {\n      this.plaintiff = plaintiff;\n    }\n\n    public Boolean getArg1() {\n      return arg1;\n    }\n\n    public void setArg1(Boolean arg1) {\n      this.arg1 = arg1;\n    }\n\n    public List<String> getArg2() {\n      return arg2;\n    }\n\n    public void setArg2(List<String> arg2) {\n      this.arg2 = arg2;\n    }\n  }\n'})})}),(0,i.jsx)(s.Z,{value:"kotlin",label:"Kotlin",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'val lawGetLatestLawsuitsByPlaintiff = FlappyInvokeFunction(\n  name = "getLatestLawsuitsByPlaintiff",\n  description = "Get the latest lawsuits by plaintiff.",\n  args = GetLatestLawsuitsArguments::class.java,\n  returnType = String::class.java,\n  invoker = { _, _ -> MOCK_LAWSUIT_DATA }\n)\nclass GetLatestLawsuitsArguments(\n  @FlappyField\n  val plaintiff: String,\n\n  @FlappyField(description = "For demo purpose. set to False")\n  val arg1: Boolean,\n\n  @FlappyField(description = "ignore it", optional = true)\n  val arg2: List<String>?\n)\n'})})}),(0,i.jsx)(s.Z,{value:"csharp",label:"C#",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'new InvokeFeature<GetLatestLawsuits_Args,GetMeta_Args,FlappyFeatureOption>(new InvokeFeatureDefinition<GetLatestLawsuits_Args, GetMeta_Args>\n{\n    Name = "getLatestLawsuitsByPlaintiff",\n    Description= "Get the latest lawsuits by plaintiff.",\n    Args = new GetLatestLawsuits_Args(),\n    ReturnType = new GetMeta_Args(),\n    Resolve = (args) =>\n    {\n       Console.WriteLine($"====================== getLatestLawsuitsByPlaintiff call =========================");\n       Console.WriteLine($"getLatestLawsuitsByPlaintiff called");\n       Console.WriteLine(JObject.FromObject(args).ToString());\n       Console.WriteLine($"====================== getLatestLawsuitsByPlaintiff call =========================");\n       return Task.FromResult(new GetMeta_Args\n       {\n         Lawsuit =  MOCK_LAWSUIT_DATA\n       });\n    }\n})\n\ninternal class GetMeta_Args\n{\n  [Description("Lawsuit full text.")]\n  public string Lawsuit { get; set; }\n\n  public override string ToString()\n  {\n    return JObject.FromObject(this).ToString();\n  }\n}\n\n[JsonObject(ItemRequired = Required.Always)]\npublic class GetMeta_Return\n{\n  [JsonConverter(typeof(StringEnumConverter))]\n  [DefaultValue(Verdict.Unknow)]\n  public Verdict Verdict { get; set; } = Verdict.Unknow;\n\n  public string Plaintiff { get; set; } = string.Empty;\n\n  public string Defendant { get; set; } = string.Empty;\n\n  public string[] JudgeOptions { get; set; } = Array.Empty<string>();\n\n  public override string ToString()\n  {\n    return JObject.FromObject(this).ToString();\n  }\n}\n'})})})]})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},1670:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>s});var i=t(7378);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);